// ... dentro de sock.ev.on('messages.upsert', async (m) => { ...

        else if (cmd === 'ig') {
            const url = args[1];
            if (!url) { await sock.sendMessage(from, { text: 'Usa: .ig <URL>' }, { quoted: msg }); continue; }
            const id = Date.now() + '-' + Math.random().toString(36).slice(2,8);
            // USANDO TEMP_DIR (plugins)
            const videoPath = path.join(TEMP_DIR, `tmp-ig-${id}.mp4`); 
            
            try {
                const igData = await IGDownloader(url);
                
                // 1. OBTENER METADATOS Y VISTA PREVIA
                // Asumimos que igData.thumbnail_url y igData.caption contienen la info
                const title = igData.caption || 'Video de Instagram';
                const coverUrl = igData.thumbnail_url;
                let thumbnailBuffer = null;

                if (coverUrl) {
                    // Descargamos la miniatura para usarla en los mensajes
                    thumbnailBuffer = await fetch(coverUrl).then(res => res.buffer());
                }

                // 2. ENVIAR MENSAJE DE VISTA PREVIA Y ESTADO
                await sock.sendMessage(from, { 
                    text: `Título: **${title}**\n\nDescargando video de Instagram...`,
                    jpegThumbnail: thumbnailBuffer, // Miniatura en el mensaje de espera
                }, { quoted: msg });
                
                // 3. DESCARGA Y ENVÍO DEL VIDEO REAL
                const videoBuffer = await fetch(igData.url).then(res => res.buffer());
                fs.writeFileSync(videoPath, videoBuffer);
                
                // Enviamos el video final, asegurándonos de incluir la miniatura nuevamente
                await sock.sendMessage(from, { 
                    video: fs.readFileSync(videoPath), 
                    mimetype: 'video/mp4',
                    caption: `✅ **${title}**`, 
                    jpegThumbnail: thumbnailBuffer // ⬅️ Miniatura en el mensaje final
                });
                
                fs.unlinkSync(videoPath); // Eliminamos el archivo de 'plugins/'
            } catch(e){ 
                console.error(e); 
                await sock.sendMessage(from, { text: '❌ Error al descargar IG (post, reel o IGTV). Asegúrate de que el post sea público.' }, { quoted: msg }); 
            }
        }
// ...